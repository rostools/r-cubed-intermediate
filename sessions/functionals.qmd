# Doing many things at once with functionals {#sec-functionals}

```{r setup}
#| include: false
library(here)
library(dplyr)
library(purrr)
library(fs)
load(here("_temp/functions.RData"))
source(here("R/functions.R"))
```

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Briefly go over the bigger picture (found in the introduction section)
and remind everyone the 'what' and 'why' of what we are doing.
:::

## Learning objectives

{{< include /includes/_learning-objectives-functionals.qmd >}}

## Functional programming

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Go over this section briefly by reinforcing what they read, especially
reinforcing the concepts shown in the image. Make sure they understand
the concept of applying something to many things at once and that
functionals are better coding patterns to use compared to loops. Doing
the code-along should also help reinforce this concept.

Also highlight that the resources appendix has some links for continued
learning for this and that the Posit `{purrr}` cheat sheet is an amazing
resource to use.
:::

::: callout-note
## Reading task: \~15 minutes

Unlike many other programming languages, R's primary strength and
approach to programming is in functional programming. So what is it? It
is programming that:

-   Uses functions (like `function()`).
-   Applies functions to vectors all at once (called
    [vectorisation](https://bookdown.org/rdpeng/rprogdatascience/vectorized-operations.html)),
    rather than one at a time.
    -   Vectors are multiple items, like a sequence of numbers from 1 to
        5, that are bundled together, for instance a column for body
        weight in a dataset is a vector of numbers.
-   Can use functions as input to other functions to then output a
    vector (called a
    [functional](https://adv-r.hadley.nz/functionals.html)).

We've already covered functions. You've definitely already used
vectorization since it is one of R's big strengths. For instance,
functions like `mean()`, `sd()`, `sum()` are vectorized in that you give
them a vector of numbers and they do something to all the values in the
vector at once. In vectorized functions, you can give the function an
entire vector (e.g. `c(1, 2, 3, 4)`) and R will know what to do with it.
@fig-vectorization shows how a function conceptually uses vectorization.

![A function using vectorization. Notice how a set of items is included
*all at once* in the `func()` function and outputs a single item on the
right. Modified from the [Posit purrr
cheat sheet](https://raw.githubusercontent.com/rstudio/cheat sheets/master/purrr.pdf).](/images/vectorization.png){#fig-vectorization
width="45%"}

For example, in R, there is a vectorized function called `sum()` that
takes the entire vector of `values` and outputs the total sum, without
needing a for loop.

```{r}
values <- 1:10
# Vectorized
sum(values)
```

As a comparison, in other programming languages, if you wanted to
calculate the sum you would need a loop:

```{r using-for-loop}
total_sum <- 0
# a vector
values <- 1:10
for (value in values) {
  total_sum <- value + total_sum
}
total_sum
```

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Emphasize this next paragraph.
:::

Writing effective and proper for loops is actually quite tricky and
difficult to easily explain. Because of this and because there are
better and easier ways of writing R code to replace for loops, we will
**not** be covering loops in this workshop.

A **functional** on the other hand is a function that can also use a
function as one of its arguments. @fig-functionals shows how the
functional `map()` from the `{purrr}` package works by taking a vector
(or list), applying a function to each of those items, and outputting
the results from each function. The name `map()` doesn't mean a
geographic map, it is the mathematical meaning of map: To use a function
on each item in a set of items.

![A functional, in this case `map()`, applies a function to each item in
a vector. Notice how each of the green coloured boxes are placed into
the `func()` function and outputs the same number of blue boxes as there
are green boxes. Modified from the [Posit purrr
cheat sheet](https://raw.githubusercontent.com/rstudio/cheat sheets/master/purrr.pdf).](/images/functionals.png){#fig-functionals
width="90%"}

Here's a simple toy example to show how it works. We'll use `paste()` on
each item of `1:5`.

```{r}
library(purrr)
map(1:5, paste)
```

You'll notice that `map()` outputs a list, with all the `[[1]]` printed.
`map()` will always output a list. Also notice that the `paste()`
function is given *without* the `()` brackets. Without the brackets, the
function can be used by the `map()` functional and treated like any
other object in R.

Let's say we wanted to paste together the number with the sentence
"seconds have passed". Normally it would look like:

```{r paste-multiple}
paste(1, "seconds have passed")
paste(2, "seconds have passed")
paste(3, "seconds have passed")
paste(4, "seconds have passed")
paste(5, "seconds have passed")
```

Or as a loop:

```{r paste-loop}
for (num in 1:5) {
  sec_passed <- paste(num, "seconds have passed")
  print(sec_passed)
}
```

With `map()`, we'd do this a bit differently. `{purrr}` allows us to
create anonymous functions (functions that are used once and disappear
after usage) to extend its capabilities. Anonymous functions are created
by writing `function(x)` (the short version is `\(x)`), followed by the
function definition inside of `map()`. Using `map()` with an anonymous
function allows us to do more things to the input vector (e.g. `1:5`).
Here is an example:

```{r}
map(1:5, function(x) paste(x, "seconds have passed"))
# Or with the short version
map(1:5, \(x) paste(x, "seconds have passed"))
```

::: {.callout-note appearance="default"}
`{purrr}` supports the use of a syntax shortcut to write anonymous
functions. This shortcut is using `~` (tilde) to start the function and
`.x` as the replacement for the vector item. `.x` is used instead of `x`
in order to avoid potential name collisions in functions where `x` is an
function argument (for example in `ggplot2::aes()`, where `x` can be
used to define the x-axis mapping for a graph). Here is the same example
as above, now using the `~` shortcut:

```{r}
map(1:5, ~ paste(.x, "seconds have passed"))
```

However, the package authors now strongly recommend using the more
recent `\(x)` R syntax instead of `~` for anonymous functions. This is
mostly to be consistent with base R and to make use of the clearer
argument naming within the anonymous function, rather than rely on `.x`
or `.y` as the argument names.
:::

`map()` will always output a list, but sometimes we might want to output
a different data type. If we look into the help documentation with
`?map`, it shows several other types of map that all start with `map_`:

-   `map_chr()` outputs a character vector.
-   `map_int()` outputs an integer.
-   `map_dbl()` outputs a numeric value, called a "double" in
    programming.

This is the basics of using functionals. Functions, vectorization, and
functionals provide expressive and powerful approaches to a simple task:
*Doing an action on each item in a set of items*. And while technically
using a for loop lets you "not repeat yourself", they tend to be more
error prone and harder to write and read compared to these other tools.
For some alternative explanations of this, see
@sec-alternative-loop-explanation.
:::

But what does functionals have to do with what we are doing now? Well,
our `import_user_info()` function only takes in one data file. But we
have 22 files that we could load all at once if we used functionals.

Before we'll use the `map()` functional, we need to get a vector or list
of all the dataset files available to us. We will return to using the
`{fs}` package, which has a function called `dir_ls()` that finds files
of a certain pattern. So, let's add `library(fs)` to the `setup` code
chunk. Then, go to the bottom of the `docs/learning.qmd` document, create
a new header called `## Using map`, and create a code chunk below that
with {{< var keybind.chunk >}}

The `dir_ls()` function takes the path that we want to search
(`data-raw/mmash/`), uses the argument `regexp` (short for [regular
expression](https://r4ds.had.co.nz/strings.html#matching-patterns-with-regular-expressions)
or also `regex`) to find the pattern, and `recurse` to look in all
subfolders. We'll cover regular expressions more in the next session. In
our case, the pattern is `user_info.csv`, so the code should look like
this:

```{r list-user-info-files}
#| filename: "docs/learning.qmd"
user_info_files <- dir_ls(here("data-raw/mmash/"),
  regexp = "user_info.csv",
  recurse = TRUE
)
```

Then let's see what the output looks like. For the website, we are only
showing the first 3 files. Your output will look slightly different from
this.

``` {.r filename="docs/learning.qmd"}
user_info_files
```

```{r admin-list-files-for-book}
#| echo: false
head(gsub(".*\\/data-raw", "data-raw", user_info_files), 3)
```

Alright, we now have all the files ready to give to `map()`. But before
using it, we'll need to add `{purrr}`, where `map()` comes from as a
package dependency by going to the **Console** and running:

``` {.r filename="Console"}
usethis::use_package("purrr")
```

Since `{purrr}` is part of the `{tidyverse}`, we don't need to load it
with `library()`. So let's try it!

```{r}
#| filename: "docs/learning.qmd"
user_info_list <- map(user_info_files, import_user_info)
```

Remember, that `map()` always outputs a list, so when we look into this
object, it will give us 22 tibbles (data.frames). Here we'll only show
the first one:

```{r}
#| filename: "docs/learning.qmd"
user_info_list[[1]]
```

This is great because with one line of code we imported all these
datasets! But we're missing an important bit of information: The user
ID. A powerful feature of the `{purrr}` package is that it has other
functions to make it easier to work with functionals. We know `map()`
always outputs a list. But what we want is a single data frame at the
end that also contains the user ID.

The function that will take a list and convert it into a data frame is
called `list_rbind()` to bind ("stack") by rows or `list_cbind()` to
bind ("stack") by columns. We want to bind by rows, so will use
`list_rbind()` and if we look at the help for it, we see that it has an
argument `names_to`. This argument lets us create a new column that sets
the user ID, or in this case, the file path to the dataset, which has
the user ID information in it. So, let's use it and create a new column
called `file_path_id`.

```{r}
#| filename: "docs/learning.qmd"
user_info_df <- map(user_info_files, import_user_info) |>
  list_rbind(names_to = "file_path_id")
```

Your `file_path_id` variable will look different. Don't worry, we're
going to tidy up the `file_path_id` variable later.

``` {.r filename="docs/learning.qmd"}
user_info_df
```

```{r admin-show-data-for-book}
#| echo: false
user_info_df |>
  trim_filepath_for_book()
```

::: {.callout-note appearance="default"}
We're using the base R `|>` pipe rather than the `{magrittr}` pipe `%>%`
as more documentation and packages are using or relying on it. In terms
of functionality, they are nearly the same, with some small differences.
It ultimately doesn't matter which one you use, but we're using the base
R `|>` pipe to be consistent with other documentation and with the
general trend to recommend it over the `{magrittr}` pipe.
:::

Now that we have this working, let's **add and commit** the changes to
the Git history, by using {{< var keybind.git >}}

## Exercise: Make a function for importing other datasets with functionals {#sec-ex-function-import-all-data}

> Time: \~30 minutes.

We *eventually* (but not yet) want to do the exact same thing for
importing the `saliva.csv`, `RR.csv`, and `Actigraph.csv` datasets,
mimicking the code:

```{r}
#| eval: false
user_info_files <- dir_ls(here("data-raw/mmash/"),
  regexp = "user_info.csv",
  recurse = TRUE
)
user_info_df <- map(user_info_files, import_user_info) |>
  list_rbind(names_to = "file_path_id")
```

Notice that if we wanted to import one of the other datasets, we could
copy the code above and make changes at two locations to import the data
files: at the `regexp =` argument in `dir_ls()` and at the
`import_user_info` location within `map()`.

Since we **do not** want to repeat ourselves, this is a perfect chance
to convert this code above into a function, so we can use this new
function to import the other datasets without repeating ourselves.

So inside `docs/learning.qmd`, convert this bit of code into a function
that works to import the other three datasets.

Complete the tasks below and use this below code as a guide to help
complete this exercise:

``` {.r filename="docs/learning.qmd"}
___ <- ___(___, ___) {
  ___ <- ___dir_ls(___here("data-raw/mmash/"),
    regexp = ___,
    recurse = TRUE
  )

  ___ <- ___map(___, ____) |> 
    ___list_rbind(names_to = "file_path_id")
  ___(___)
}
```

1.  Create a new header `## Exercise: Map on the other datasets` at the
    bottom of the document.
2.  Create a new code chunk below it, using {{< var keybind.chunk >}}.
3.  Use the template code above and the `user_info` code at the start of
    this exercise section, re-write the code to be able to repeat the
    steps you've taken previously to be able to import the other three
    datasets *using a newly created function*.
    -   Name the function `import_multiple_files`
    -   Use the `function() { ... }` code to create a new function
    -   Within `function()`, set two new arguments called `file_pattern`
        and `import_function`.
    -   Within the code, use the `user_info` code above as a guide,
        re-write `"user_info.csv"` with `file_pattern` (this is
        *without* quotes around it, otherwise R will interpret it as the
        pattern to look for in the `regexp` argument, with the value
        `"file_pattern"` and not as the value from `file_pattern`
        argument we created for our function) and `import_user_info`
        with `import_function` (also *without* quotes).
    -   Create generic intermediate objects. So, change the code
        `user_info_files` with `data_files` and the code `user_info_df`
        with `combined_data`.
    -   Use `return(combined_data)` at the end of the function to output
        the imported data frame.
    -   Create and write Roxygen documentation to describe the new
        function by using {{< var keybind.roxygen >}}.
    -   Append `packagename::` to the individual functions (there are
        three packages used: `{fs}`, `{here}`, and `{purrr}`)
    -   Run it and check that it works on `saliva.csv` by using
        `import_multiple_files("saliva.csv", import_saliva)`.
4.  After it works, cut and paste the function into the `R/functions.R`
    file. Then restart the R session with {{< var keybind.restart-r >}},
    run the line with `source(here("R/functions.R"))` or with
    {{< var keybind.source >}}, and test the code out in the
    **Console**.
5.  Run `{styler}` while in the `R/functions.R` file with
    {{< var keybind.styler >}}.
6.  Once done, **add** the changes you've made and **commit** them to
    the Git history, using {{< var keybind.git >}}.

```{r solution-import-multiple-files}
#| output: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are struggling or are out of time."
#' Import multiple MMASH data files and merge into one data frame.
#'
#' @param file_pattern Pattern for which data file to import.
#' @param import_function Function to import the data file.
#'
#' @return A single data frame/tibble.
#'
import_multiple_files <- function(file_pattern, import_function) {
  data_files <- fs::dir_ls(here::here("data-raw/mmash/"),
    regexp = file_pattern,
    recurse = TRUE
  )

  combined_data <- purrr::map(data_files, import_function) |>
    purrr::list_rbind(names_to = "file_path_id")
  return(combined_data)
}

# Test on saliva in the Console
import_multiple_files("saliva.csv", import_saliva)
```

## :speech_balloon: Discussion activity: Incorporating functionals in your own work

**Time: ~10 minutes.**

As we prepare for the next session, discuss with your neighbour or group
the following question:

-   Think about the functions and functionals sessions. Discuss with
    your group some ideas on how you can implement making functions and
    using functionals in your work. What are some things you do
    repetitively (in code or general work) that you think would be great
    to have simplified or automated.

## Summary

-   R is a functional programming language:
    -   It uses functions that take an input, do an action, and give an
        output.
    -   It uses vectorisation that apply a function to multiple items
        (in a vector) all at once rather than using loops.
    -   It uses functionals that allow functions to use other functions
        as input.
-   Use the `{purrr}` package and its function `map()` when you want to
    repeat a function on multiple items at once.

```{r store-session-code}
#| include: false
rm(actigraph_df, rr_df)
save.image(here::here("_temp/functionals.RData"))
```
