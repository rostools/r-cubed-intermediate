# Making robust and general-purpose functions {#sec-robustness}

```{r setup}
#| include: false
library(fs)
library(tidyverse)
library(snakecase)
library(readr)
library(here)
load(here("_temp/functions.RData"))
temp_path <- fs::path_temp()
project_path <- fs::path(temp_path, "LearnR3")

untar(
  tarfile = here::here("_temp", "project.tar.gz"),
  exdir = project_path
)
```

## Learning objectives

{{< include /includes/objectives/_robustness.qmd >}}

## :speech_balloon: Discussion activity: How might you make your functions more general-purpose?

**Time: \~8 minutes.**

One of the more powerful features of making functions is that you can
easily reuse them in other sections of the file or in other files, which
we will cover how to do later in this session. Part of that power comes
from knowing how to make functions that are general enough to be used in
other settings too.

From the previous session, we made the `import_cgm()` function together
and in the exercises you made the `import_sleep()` function. These two
functions basically do the same thing. So why have two? We don't need
two! So let's refactor the `import_cgm()` function so it is clearer what
it does and can do.

The first step is to look at the code to see what it does and see how
you can modify it to be more general-purpose.

1.  Take 2 minutes to look over the two functions you made and think
    about what you could do to make it more general-purpose.
2.  Take 3 minutes to discuss with your neighbour what you think could
    be done to make it more general-purpose and try to come to a
    conclusion.
3.  Then all together and in the remaining time, everyone will share
    what they've thought of.

Try not to look ahead ðŸ˜œ We won't generalise the function yet, first we
will make it more robust, and then we will generalise it.

## :book: Reading task: Making your function more robust with explicit dependencies

**Time: \~10 minutes.**

Before we make the function more general-purpose, this is a good time to
talk about package dependencies and making your function more robust and
trust-worthy.

So what is a package dependency and how do you manage it? Whenever you
use an R package in your project, you depend on it in order for your
code to work. The informal way to "manage" dependencies is by doing what
you've already done before: using the `library()` function to load the
package into R.

As you read others code online or from other researchers, you may notice
that sometimes the function `require()` is used to load packages like
the `library()` function is used. The problem with `require()` is that
if the package can't be loaded, it doesn't give an error. That's because
`require()` only *checks* if the package is available and will otherwise
continue running the code. As we'll cover in this course, this can be a
very bad thing because if a package isn't loaded, it can change the
behaviour of some of your code and give you potentially wrong results.
On the other hand, `library()` will give an error if it can't find the
package, which is what you expect if your code depends on a package.

So, what happens if you come back to the project, or get a new computer,
or someone else is working on your project too and they want to make
sure they have the packages your project needs? How will they know what
packages your project uses? What do they do to get those packages
installed? Do they have to search through all your files just to find
all `library()` functions you used and then install those packages
individually and manually? A much better way here is to formally
indicate your package dependency so that installing dependencies is
easy! And we do this by making use of the `DESCRIPTION` file.

The advantage of using the `DESCRIPTION` file is that it is a standard
file used by R projects to store metadata about the project, including
which packages are needed to run the project. It also means there are
many helper tools available that use this `DESCRIPTION` file, including
tools to install all the packages you need.

So, if you or someone else wants to install all the packages your
project depends on, all you or they have to do is go to the **Console**
and type out (you don't need to do this right now):

```{r pak-pak}
#| filename: "Console"
#| eval: false
pak::pak()
```

This function looks into the `DESCRIPTION` file and installs all the
packages listed as dependencies there.

Where are these package dependencies listed in the `DESCRIPTION` file?
Open up your `DESCRIPTION` file, which you can do quickly with
{{< var keybind.open-file >}}, typing the file name out, and hitting
enter to open it. Your file may or may not look like the below text. If
it doesn't, it isn't a problem as the text is just to give you an idea
of what it might look like.

```{r admin-print-desc}
#| echo: false
#| comment: ""
usethis::with_project(
  path = project_path,
  {
    desc::desc_print()
  },
  quiet = TRUE
)
```

While we cannot see how package dependencies are defined yet, we will
in the next session create an `Imports:` key and go over how to add
packages to this field.

{{< text_snippet sticky_up >}}

## Explicitly state a project's package dependencies

There are a few ways to add package dependencies to the `DESCRIPTION`
file. The most straightforward way is to manually write the package you
need in the `Imports:` section of `DESCRIPTION` file. But, there are a
few issues with that, mainly, you may not add it correctly. The other,
better way to add dependencies is to use the `usethis::use_package()`
function.

Since we've used the `{here}` package in our code, let's add it as a
dependency. Go to the **Console** and let's type out how to add it.
Don't write this code in your Quarto document, since you don't want to
run it every time you render the document.

```{r use-package-here}
#| filename: "Console"
#| eval: false
usethis::use_package("here")
```

```{r admin-use-package-here}
#| echo: false
usethis::with_project(
  path = project_path,
  {
    usethis::use_package("here")
  },
  quiet = TRUE
)
```

You will see a bunch of text about adding it to `Imports`. If you look
in your `DESCRIPTION` file now, you'll see something like:

```{r admin-print-desc-add-here}
#| echo: false
#| comment: ""
usethis::with_project(
  path = project_path,
  {
    desc::desc_print()
  },
  quiet = TRUE
)
```

Since we will also make use of the `{tidyverse}` set of packages later
in the workshop, we'll also add `{tidyverse}` as a dependency.

```{r use-package-tidyverse}
#| filename: "Console"
#| eval: false
usethis::use_package("tidyverse")
```

```{r admin-use-packages-tidyverse}
#| echo: false
#| error: true
usethis::with_project(
  path = project_path,
  {
    usethis::use_package("tidyverse")
  },
  quiet = TRUE
)
```

This gives an error though. That's because the `{tidyverse}` is a large
collection of packages, so as stated by the message, the recommended way
to add this particular dependency is with:

```{r use-package-tidyverse-depends}
#| filename: "Console"
#| eval: false
usethis::use_package("tidyverse", type = "Depends")
```

```{r admin-use-packages-tidyverse-depends}
#| echo: false
usethis::with_project(
  path = project_path,
  {
    usethis::use_package("tidyverse", type = "Depends")
  },
  quiet = TRUE
)
```

If you look in the `DESCRIPTION` file now, you see that the new
`Depends` field has been added with `{tidyverse}` right below it.

```{r admin-print-desc-add-tidyverse}
#| echo: false
#| comment: ""
usethis::with_project(
  path = project_path,
  {
    desc::desc_print()
  },
  quiet = TRUE
)
```

There are fairly technical reasons why we need to put tidyverse in the
`Depends` field that you don't need to know about for this workshop,
aside from the fact that it is a common practice in R projects. At least
in this context, we use the `Depends` field for `{tidyverse}` because of
one big reason: the `usethis::use_package()` function will complain if
we try to put `{tidyverse}` in the `Imports` and it recommends putting
it in the `Depends` field. The other reason is that you never *directly*
use the `{tidyverse}` package, but rather the individual packages that
it loads.

Great! Now that we've formally established package dependencies in our
project, we also need to formally declare which package each function
comes from inside our own functions.

## Explicitly state which package a function comes from

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Put on the project the callout block below and explain why we want to
make dependencies within functions more explicit and why using
`library()` and `require()` is a bad idea.
:::

One important way of making more robust functions is by coding the exact
packages each of our functions come from that we use in our own
function. That makes it much easier to reuse, won't break as easily, and
will give more predictable results each time you run it.

::: callout-important
Regarding the use of `library()` and `require()`, you may think that one
way of telling your function what package to use is to include
`library()` or `require()` inside the function. This is an incorrect way
to do it and can often give completely wrong results without giving any
error or warning. Sometimes, on some websites and help forums, you may
see code that looks like this:

``` r
add_numbers <- function(num1, num2) {
  library(package_name)
  ...code...
  return(added)
}
```

Or:

``` r
add_numbers <- function(num1, num2) {
  require(package_name)
  ...code...
  return(added)
}
```

This is *very* **bad practice** and can have some unintended and serious
consequences without giving any warning or error. We won't get into the
reasons why this is incorrect because it can quickly get quite technical
and is out of the scope of this workshop.
:::

The correct way to explicitly use a function from a package is using
something we've already used before with `usethis::use_package()`: By
using `::`! For every function inside your package, aside from functions
that come from `{base}`, use `package_name::function_name()`.

When we use `package_name::function_name` for each function in our
function, we are explicitly telling R (and us the readers) where the
function comes from. This can be important because sometimes the same
function name can be used by multiple packages, for example the
`filter()` function. So if you don't explicitly state which package the
function is from, R will use the function that it finds first---which
isn't always the function you wanted to use. We also do this step at the
end of making the function because doing it while we create it can be
quite tedious.

Let's start doing that with our function. We may not always know which
package a function comes from, but we can easily find that out. Let's
start with the first action in our function: `read_csv()`. In the
**Console**:

```{r help-read-csv}
#| filename: "Console"
#| eval: false
?read_csv
```

This will open the help page for the `read_csv()` function. If you look
at the top left corner, you'll see the package name in curly brackets
`{}`. This tells you which package the function comes from. In this
case, it is `{readr}`. So, we can update our function to use
`readr::read_csv()` instead of just `read_csv()`:

```{r import-cgm-function}
import_cgm <- function(file_path) {
  cgm <- file_path |>
    readr::read_csv(
      show_col_types = FALSE,
      name_repair = to_snake_case,
      n_max = 100
    )
  return(cgm)
}
```

There is still more to do, but now it's your turn to try.

## :technologist: Exercise: Finish setting the dependencies

**Time: \~10 minutes.**

In this exercise, you will finish setting the dependencies for the
`import_cgm()` function as well as the `DESCRIPTION` file.

1.  While we added `{readr}` to the function, we haven't added it to the
    `DESCRIPTION` file yet. In the **Console**, use
    `usethis::use_package()` to add the `{readr}` package to the
    `DESCRIPTION` file.
2.  There is one other function we use in the `import_cgm()` function.
    Find it, figure out what package it comes from, use `::` to
    explicitly state the package, and add it to `DESCRIPTION` file using
    `usethis::use_package()` in the **Console**.
3.  There is one other package we've used that we haven't added to the
    `DESCRIPTION` file. We used the package in the `data-raw/dime.R`
    file. Open that file, which you can do with
    {{< var keybind.open-file >}} and typing "dime.R" and selecting the
    file from the menu. In that file, find the package we used and add
    it to the `DESCRIPTION` file using `usethis::use_package()` in the
    **Console**.
4.  Finally, style the code using {{< var keybind.style >}}, render the
    `docs/learning.qmd` file with {{< var keybind.render >}} to test
    that everything still works, and then add and commit the changes to
    Git with {{< var keybind.commit >}}. While in the interface, push to
    GitHub.

{{< include /includes/solutions/_robustness-set-dependencies.qmd >}}

{{< text_snippet sticky_up >}}

## :book: Reading task: Principles to make general-purpose and reusable functions

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Briefly reinforce what they read by slowly going through these points
below about making generalised functions. Emphasise the principles
below, especially the "do one thing" and "keep it small".
:::

**Time: \~3 minutes.**

Recall from our discussion at the start of this session about making our
`import_cgm()` function more general. There are a few ways we could do
it, before first, let's go over some general principles of making
functions that are more general-purpose and reusable. These principles
are:

1.  Have the function's input (the arguments) be generic enough to take
    different types of objects as long as they are the same "type". In
    our case, we have two functions that both take a path "type". A path
    is a very general input, so we can keep it as is.
2.  Have the function's output be a common "type", like a vector or data
    frame. When working in R, it's a very good practice to have
    functions output a data frame, since many functions, especially in
    the `{tidyverse}`, take a data frame as input.
3.  Make the first argument of the function be something that can be
    "pipe-able". That way you can chain together your functions with the
    `|>` operator. In this case, either always have `data` as the first
    argument to work well with piping from `{tidyverse}` functions.
4.  Make your function do one conceptual thing well. For example, read
    data from a file and make it cleaner. Or convert all columns that
    are characters into numbers.
5.  Keep the function small. It is easier to be reused, easier to test,
    and easier to debug when it has fewer lines of code.

{{< text_snippet sticky_up >}}

## Generalising our import function

So, let's make our `import_cgm()` function more general-purpose. We know
that both the `import_cgm()` and `import_sleep()` functions do basically
the same thing:

1.  Have a file path as an argument.
2.  Read in the path to a CSV file with `readr::read_csv()`.
3.  Convert column names to snake case with
    `snakecase::to_snake_case()`.
4.  Limit the number of rows imported with `n_max`.
5.  Quiet the message about the column types with
    `show_col_types = FALSE`.
6.  Output the imported data frame.

So, we can combine the two functions into one function that does all of
these things. We could call the function a lot of different names
(naming is really hard in coding), but let's keep it simple and call it
`import_dime()`. We want this function to be able to import different
CSV files, for example:

```{r import-dime-generic}
#| filename: "docs/learning.qmd"
#| eval: false
here("data-raw/dime/cgm/101.csv") |>
  import_dime()
here("data-raw/dime/sleep/101.csv") |>
  import_dime()
```

Let's generalise the function! Rather than internally say `cgm` or
`sleep`, we can keep it simple can call it `data`. Create a new header
at the bottom of the `docs/learning.qmd` file called
`## Import DIME data function` and create a code chunk with
{{< var keybind.chunk >}}. Then we'll write the new function from
scratch:

```{r import-dime-data-function}
#| filename: "docs/learning.qmd"
import_dime <- function(file_path) {
  data <- file_path |>
    readr::read_csv(
      show_col_types = FALSE,
      name_repair = snakecase::to_snake_case,
      n_max = 100
    )
  return(data)
}
```

Before testing it out, let's make the Roxygen documentation for it with
{{< var keybind.roxygen >}}:

```{r import-dime-roxygen}
#| filename: "docs/learning.qmd"
#' Import data from the DIME study dataset.
#'
#' @param file_path Path to the CSV file.
#'
#' @returns A data frame.
#'
import_dime <- function(file_path) {
  data <- file_path |>
    readr::read_csv(
      show_col_types = FALSE,
      name_repair = snakecase::to_snake_case,
      n_max = 100
    )
  return(data)
}
```

Below the function, write out these two lines of code to test that it
works:

```{r test-import-dime}
#| filename: "docs/learning.qmd"
here("data-raw/dime/cgm/101.csv") |>
  import_dime()
here("data-raw/dime/sleep/101.csv") |>
  import_dime()
```

This should work without any problems :tada: Let's style the code with
{{< var keybind.style >}} and then render the document with
{{< var keybind.render >}} to test that everything works. If everything
works, let's add and commit the changes to the Git history using
{{< var keybind.commit >}}. Then, push to GitHub.

## :book: Reading task: Easily reuse stable, robust functions by storing them in the `R/` folder

::: {.callout-note appearance="minimal" collapse="true"}
## Teacher note

Briefly explain the workflow a bit more, highlighting the diagram.
:::

**Time: ~5 minutes.**

While you use Quarto to test out and prototype code, you'll use R
scripts, like `R/functions.R`, to keep the code you have already tested out
already and are fairly confident that it works as intended. This
workflow, of creating code and converting it into a function, is called
a "function-based workflow". This is an incredibly common workflow in R
projects and forms the basis for many other workflows and tools, such as
ones that are covered in the [advanced
workshop](https://r-cubed-advanced.rostools.org).

So you'll use Quarto (`docs/learning.qmd`) to write and test out code,
convert it into a function (that we will cover in this workshop), and
then move it into `R/functions.R` script. We have this split to
create a separation, cognitively and physically, between the prototyping code
and the finalized, tested code. Then, within the Quarto document we
can `source()` the `R/functions.R` script so we have access to the
stable and tested code. We use `source()` to tell R to look in the file we
give it, run all the code in the file, and include the contents into our
working environment. That way, you can keep more code in other locations
to make your code more organised. This workflow is represented below in
@fig-quarto-to-functions.

```{mermaid}
%%| echo: false
%%| label: "fig-quarto-to-functions"
%%| fig-cap: "Workflow for prototyping code in Quarto, moving it to an R script, then sourcing the script from Quarto."
%%| fig-alt: "A diagram representing the workflow for using Quarto to prototype and test code, moving that tested code to the R functions script, and sourcing back into the Quarto document."
flowchart TD
  quarto[/"Quarto:<br>docs/learning.qmd"/] --> code(Prototyping<br>R code)
  code --> test("Testing that<br>code works")
  test -- "Cut & paste<br>Commit to Git"--> functions[/"R/functions.R"/]
  functions -- "source()" --> quarto
```

{{< text_snippet sticky_up >}}

## Cutting and pasting functions in `R/functions.R`

::: {.callout-note appearance="minimal" collapse="true"}
## Teacher note

Really emphasize to **cut** and paste, so that the function in the
`docs/learning.qmd` file is **deleted** and no longer kept in the Quarto
document.
:::

We've now created one general-purpose function that we can use later to
import many different types of data files. We've made it more robust and
have tested it so we can be certain it is fairly stable now. Let's move
the function into a location so that we would be able to re-use it in
other Quarto documents (if we had more). Since we already have a file
called `R/functions.R`, we will keep all our stable and tested functions
in there.

So, in the `docs/learning.qmd` file, **only cut** the function and it's
Roxygen documentation, open the `R/functions.R` with
{{< var keybind.open-file >}}, and then paste into this file.

The code in the `R/functions.R` file should now look like this:

```{r import-dime-functions-r-file}
#| filename: "R/functions.R"
#' Import data from the DIME study dataset.
#'
#' @param file_path Path to the CSV file.
#'
#' @returns A data frame.
#'
import_dime <- function(file_path) {
  data <- file_path |>
    readr::read_csv(
      show_col_types = FALSE,
      name_repair = snakecase::to_snake_case,
      n_max = 100
    )
  return(data)
}
```

We move the function over into this file for a few reasons:

1.  To avoid the Quarto document from becoming too long and having too
    many different functions and code throughout it.
2.  To make it easier to maintain and find things in your project since
    you know that all stable, tested functions are in the `R/` folder.
3.  To make use of the `source()` function to load the functions into
    any Quarto document you want to use them in.

Once we have cut and pasted it into the `R/functions.R` file, let's
include `source()` in the Quarto document. Open the `docs/learning.qmd`
file and go to the top of the file to the `setup` code chunk. Add the
line `source(here("R/functions.R"))` to the bottom of the code chunk.
This will load the functions into the Quarto document when it is
rendered. This means that we can use the functions in the
`R/functions.R` file without having the actual code be in the Quarto
document.

The `setup` code chunk should look like this now:

```` markdown
```{{r setup}}
library(tidyverse)
library(here)
library(snakecase)
source(here("R/functions.R"))
```
````

And the bottom of the Quarto document should still have the code:

```{r}
#| filename: "docs/learning.qmd"
#| output: false
here("data-raw/dime/cgm/101.csv") |>
  import_dime()
here("data-raw/dime/sleep/101.csv") |>
  import_dime()
```

But **not** have the code to make the `import_dime()` in the Quarto
document.

Let's test it that it works. Render the document with
{{< var keybind.render >}} and check that it works. If it does, then we
can add and commit the changes to both the `docs/learning.qmd` and
`R/functions.R` file before then pushing to GitHub.


## Key takeaways

::: {.callout-note appearance="minimal" collapse="true"}
## Teacher note

Quickly cover this and get them to do the survey before moving on to the
discussion activity.
:::

-   Make it easier to collaborate with yourself in the future and with
    others by explicitly setting which packages your project depends on.
    Use `usethis::use_package()` to set the dependency for you in the
    `DESCRIPTION` file.
-   Create more re-usable and easier to test and debug functions by
    keeping them small (few lines of code) and that do one (conceptual)
    thing at a time. Less is more!
-   Make your function more robust by explicitly stating which packages
    the code you use in your function comes from by using
    `package_name::function_name()`.
    -   Don't use `library()` or `require()` *within* your functions.
-   Keep your stable, robust functions in a separate file for easier
    re-use across your files, for instance, in the `R/functions.R` file.
    You can re-use the functions by using
    `source(here("R/functions.R"))` in your Quarto documents.

## :speech_balloon: Discussion activity: How robust might your code be or code that you've read?

**Time: \~6 minutes.**

Before we end for the day, help reinforce what you've learned in this
session by discussing with your neighbour some of these questions.

::: callout-tip
Part of improving your coding skills is to think about how you can
improve your code and the code of others. **No one** writes perfect code
and no one writes great code the first time. Or the second, or the third
time. Often code will be refactored multiple times before it is
(sufficiently) stable and robust. That is just how coding works.

Being open and receptive to *constructive* critique and feedback is an
essential skill to have as both a researcher and for coding. So it's
important to seek out feedback and to give feedback on your own and
others' code, and try to improve it.
:::

1.  Think about code you've written or that you've read from others
    (online or colleagues). How robust do you think it was? What are
    some things you could do to make it more robust?
2.  Together with your neighbour, discuss some of these things you've
    thought about. Try to find out if you have similar thoughts or ideas
    on how to improve things.

```{r admin-save-session-code}
#| include: false
save.image(here::here("_temp/robustness.RData"))
```

{{< include /_extensions/rostools/r3-theme/includes/code-appendix-r.qmd >}}
