# Bundling code into functions {#sec-functions}

```{r setup}
#| include: false
library(fs)
library(tidyverse)
library(readr)
library(here)
temp_path <- fs::path_temp()
project_path <- fs::path(temp_path, "LearnR3")

untar(
  tarfile = here::here("_temp", "pre-workshop.tar.gz"),
  exdir = project_path
)
```

## Learning objectives

{{< include /includes/_learning-objectives-functions.qmd >}}

## The basics of a function

::: callout-note
## Reading task: \~5 minutes

We've mentioned functions multiple times, but what is a function? At its
core, a function in R is anything that does an action. A function is a
bundled sequence of steps that achieve a specific action. For instance,
the `+` (to add) is a function, `mean()` is a function, `[]` (to subset
or extract) is a function, and so on. In simple terms, functions are
made of a function call, its arguments, and the function body:

``` {.r filename="Console"}
function(argument1, argument2){ 
  # body of function with R code
}
```

Because R is open source, anyone can see how things work underneath. So,
if we want to see what a function does underneath, we type out the
function name without the `()` into the **Console** and run it. If we do
it with the function `sd()` which calculates the standard deviation, we
see:

```{r show-sd-internals}
#| filename: "Console"
sd
```

Here you see `sd()` as the arguments `x` and `na.rm`. Within the
function body is how it calculates the standard deviation, which is the
square root of the variance. In this code, the `var()` is inside the
`sqrt()` function, which is exactly what it should be.

So, if you learn how to create your own functions, it can make doing
your work easier and more efficient because you don't have to repeat
yourself later. Making functions always has a basic structure of:

1.  Giving a name to the function (e.g. `mean`).
2.  Starting the function call using `function()`, assigning it to the
    name with `<-`. This tells R that the name is a function object.
3.  Optionally providing arguments to give to the function call, for
    instance `function(argument1, argument2, argument3)`.
4.  Filling out the body of the function, with the arguments (if any)
    contained inside, that does some action.
5.  Optionally, use `return()` to indicate what you want the function to
    output. For learning purposes, we'll always use `return()` to help
    show us what is the final function output.

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Emphasize that we will be using this workflow for creating functions all
the time throughout workshop and that this workflow is also what you'd use
in your daily work.
:::

While there is no minimum or maximum number of arguments you can provide
for a function (e.g. you could have zero or dozens of arguments), its
good practice for yourself and for others to have as few arguments as
necessary to get the job done. So, the structure is:

``` {.r filename="Console"}
name <- function(argument1, argument2) {
    # body of function
    output <- ... code ....
    return(output)
}
```

Writing your own functions can be absolutely amazing and fun and
powerful, but you also often want to pull your hair out with frustration
at errors that are difficult to understand and fix. The best way to deal
with this is by debugging. Due to time and to the challenge of making
meaningful debugging exercises (solutions to problems are very dependent
on the project), read @sec-extra-material in your own time for some
instructions on debugging and dealing with another common problem you
might encounter with R.
:::

Let's write a simple example. First, create a new Markdown header called
`## Making a function` and create a code chunk below that with
{{< var keybind.chunk >}} . Then, inside the code chunk, we'll write
this code out:

```{r create-add-function}
#| filename: "docs/learning.qmd"
add_numbers <- function(num1, num2) {
  added <- num1 + num2
  return(added)
}
```

You can use the new function by running the above code and writing out
your new function, with arguments to give it.

```{r call-function}
#| filename: "docs/learning.qmd"
add_numbers(1, 2)
```

The function name is fairly good; `add_numbers` is read as "add
numbers". While we generally want to write code that describes what it
does by reading it, it's also good practice to add some formal
documentation to the function. Use the "Insert Roxygen Skeleton" in the
"Code" menu, by typing {{< var keybind.roxygen >}}, and you can add
template documentation right above the function. It looks like:

```{r roxygen-docs-1}
#| filename: "docs/learning.qmd"
#' Title
#'
#' @param num1
#' @param num2
#'
#' @return
#' @export
#'
#' @examples
add_numbers <- function(num1, num2) {
  added <- num1 + num2
  return(added)
}
```

In the `Title` area, this is where you type out a brief sentence or
several words that describe the function. Creating a new paragraph below
this line allows you to add a more detailed description. The other items
are:

-   `@param num`: These lines describe what each argument (also called
    parameter) is for and what to give it.
-   `@return`: This describes what output the function gives. Is it a
    data.frame? A plot? What else does the output give?
-   `@export`: Tells R that this function should be accessible to the
    user of your package. Since we aren't making packages, delete it.
-   `@examples`: Any lines below this are used to show examples of how
    to use the function. This is very useful when making packages, but
    not really in this case. So we'll delete it. Let's write out some
    documentation for this function:

```{r roxygen-docs-2}
#| filename: "docs/learning.qmd"
#' Add two numbers together.
#'
#' @param num1 A number here.
#' @param num2 A number here.
#'
#' @return Returns the sum of the two numbers.
#'
add_numbers <- function(num1, num2) {
  added <- num1 + num2
  return(added)
}
```

Once we've created that, let's open up the Git Interface with
{{< var keybind.git >}} and **add and commit** these changes to our
history.

## Making a function for importing our data

Now that we have a basic understanding of what a function looks like,
let's apply it to something we're doing right now: Importing our data.

Making functions is a series of steps:

1.  Write code that works and does what you want.
2.  Enclose it as a function with `name <- function() { ... }`, with an
    appropriate and descriptive name.
3.  Create arguments in the function call
    (`function(argument1, argument2)`) with appropriate and descriptive
    names, then replace the code with the argument names where
    appropriate.
4.  Rename any objects created to be more generic and include the
    `return()` function at the end to indicate what the function will
    output.
5.  Run the function and check that it works.
6.  Add the Roxygen documentation tags with {{< var keybind.roxygen >}}
    while the cursor is in the function.

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Emphasize that we will be using this workflow for creating functions all
the time throughout workshop and that this workflow is also what you'd use
in your daily work.
:::

In `docs/learning.qmd`, create a new Markdown header called
`## Import the user data with a function` and create a code chunk below
that with {{< var keybind.chunk >}} .

So, step one. Let's take the code we wrote for importing the `user_info`
data and convert that as a function:

```{r function-creation-step-1}
#| filename: "docs/learning.qmd"
#| eval: false
user_1_info_data <- read_csv(
  user_1_info_file,
  col_select = -1,
  col_types = cols(
    gender = col_character(),
    weight = col_double(),
    height = col_double(),
    age = col_double()
  ),
  name_repair = snakecase::to_snake_case
)
```

Next we wrap it in the function call and give it an appropriate name. In
this case, `import_user_info` is descriptive and meaningful.

```{r function-creation-step-2}
#| filename: "docs/learning.qmd"
#| eval: false
import_user_info <- function() {
  user_1_info_data <- read_csv(
    user_1_info_file,
    col_select = -1,
    col_types = cols(
      gender = col_character(),
      weight = col_double(),
      height = col_double(),
      age = col_double()
    ),
    name_repair = snakecase::to_snake_case
  )
}
```

Then, we add arguments in the function and replace within the code.
Here, we have only one thing that we would change: The file path to the
dataset. So, a good name might be `file_path`.

```{r function-creation-step-3}
#| filename: "docs/learning.qmd"
#| eval: false
import_user_info <- function(file_path) {
  user_1_info_data <- read_csv(
    file_path,
    col_select = -1,
    col_types = cols(
      gender = col_character(),
      weight = col_double(),
      height = col_double(),
      age = col_double()
    ),
    name_repair = snakecase::to_snake_case
  )
}
```

Then we clean things up by renaming `user_1_info_data` since we would
like to also import more than just `user_1`. A nice object name would be
`info_data`. Add the `return()` function at the end with the object you
want your function to output.

```{r function-creation-step-4}
#| filename: "docs/learning.qmd"
import_user_info <- function(file_path) {
  info_data <- read_csv(
    file_path,
    col_select = -1,
    col_types = cols(
      gender = col_character(),
      weight = col_double(),
      height = col_double(),
      age = col_double()
    ),
    name_repair = snakecase::to_snake_case
  )
  return(info_data)
}
```

Great! Now we need to test it out. Let's try on two datasets, two
`user_info.csv` files in the `user_1` and `user_2` folders.

```{r function-creation-step-5}
#| filename: "docs/learning.qmd"
import_user_info(here("data-raw/mmash/user_1/user_info.csv"))
import_user_info(here("data-raw/mmash/user_2/user_info.csv"))
```

Awesome! It works. The final stage is adding the Roxygen documentation.

```{r function-creation-step-6}
#| filename: "docs/learning.qmd"
#' Import MMASH user info data file.
#'
#' @param file_path Path to user info data file.
#'
#' @return Outputs a data frame/tibble.
#'
import_user_info <- function(file_path) {
  info_data <- read_csv(
    file_path,
    col_select = -1,
    col_types = cols(
      gender = col_character(),
      weight = col_double(),
      height = col_double(),
      age = col_double()
    ),
    name_repair = snakecase::to_snake_case
  )
  return(info_data)
}
```

A massive advantage of using functions is that if you want to make a
change to all your code, you can very easily do it by modifying the
function and it will change all your other code too. Now that we have a
working function, run `{styler}` with {{< var keybind.styler >}} and
then let's **add and commit** it to the Git history with the RStudio Git
Interface by using {{< var keybind.git >}}.

## Exercise: Repeat with the saliva data

> Time: 15 minutes.

Take the code you created for importing the saliva data set from
@sec-ex-import-saliva and
make it into a function. It looks like the code below.

``` {.r filename="docs/learning.qmd"}
user_1_saliva_data <- read_csv(
    user_1_saliva_file,
    col_select = -1,
    col_types = cols(
        samples = col_character(),
        cortisol_norm = col_double(),
        melatonin_norm = col_double()  
    ), 
    name_repair = snakecase::to_snake_case
)
```

::: {.callout-tip appearance="default"}
A helpful tip: To move around a Quarto or R script more easily, open up
the "Document Outline" on the side by clicking the button in the top
right corner of the Quarto pane or by using {{< var keybind.outline >}}.
:::

1.  Create a new markdown header
    `## Exercise for importing the saliva data as a function`.
2.  Create a new code chunk below the header with
    {{< var keybind.chunk >}}.
3.  Paste the code you used from the exercise (shown above) into the
    code chunk and begin converting it into a function, like we did
    above.
    -   Wrap it with the `function() {...}`
    -   Make a meaningful name (use `import_saliva`)
    -   Make an argument for the file path (`file_path`) and replace
        `user_1_saliva_file` with `file_path` in the `read_csv()` code
    -   Rename the output object to `saliva_data` and put it in the
        `return()` function
    -   Run the function and then test that it works
    -   Create the Roxygen documentation by adding it with
        {{< var keybind.roxygen >}}
4.  Run `{styler}` while in the `docs/learning.qmd` file with
    {{< var keybind.styler >}}.
5.  Then, **add and commit** the changes to the Git history, using
    {{< var keybind.git >}}.

Use the below code as a guide:

``` {.r filename="docs/learning.qmd"}
# Need to also add the Roxygen documentation 
import_saliva <- function(file_path) {
    # Paste the code to import saliva data you created 
    # from previous exercise
    saliva_data <- ___(
        ___
    )
    return(saliva_data)
}

# Test that the function works
___(here("data-raw/mmash/user_1/saliva.csv"))
```

```{r solution-repeat-saliva}
#| output: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are struggling or are out of time."
#' Import the MMASH saliva file.
#'
#' @param file_path Path to the user saliva data file.
#'
#' @return Outputs a data frame/tibble.
#'
import_saliva <- function(file_path) {
  saliva_data <- read_csv(
    file_path,
    col_select = -1,
    col_types = cols(
      samples = col_character(),
      cortisol_norm = col_double(),
      melatonin_norm = col_double()
    ),
    name_repair = snakecase::to_snake_case
  )
  return(saliva_data)
}

# Test that this works
# import_saliva(here("data-raw/mmash/user_1/saliva.csv"))
```

## Summary

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Quickly cover this before finishing the session and when starting the
next session.
:::

-   Functions in R are anything that does an action.
-   Functions have five components:
    -   The three required ones are the function call with
        `function() { }`, the function body between the `{ }`, and an
        output (usually set with `return()`).
    -   The two optional ones are assigning the function to a named
        object with `<-` and the function arguments put within
        `function()`.
-   Write function documentation by using Roxygen.

```{r store-session-code}
#| include: false
save.image(here::here("_temp/functions.RData"))
```

