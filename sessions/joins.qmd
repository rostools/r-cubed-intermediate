# Joining data together {#sec-joins}

```{r setup}
#| include: false
library(here)
library(tidyverse)
load(here("_temp/pivots.RData"))
```

::: {.callout-note appearance="minimal" collapse="true"}
## Teacher note

Briefly go over the bigger picture (found in the introduction section)
and remind everyone the 'what' and 'why' of what we are doing, and where
we are at.
:::

## Learning objectives

{{< include /includes/objectives/_joins.qmd >}}

## :book: Reading task: The many ways to join data

**Time: \~10 minutes.**

::: {.callout-note appearance="minimal" collapse="true"}
## Teacher note

Walk through and describe these images and the different type of joins
after they've read it.
:::

The ability to join datasets together is a fundamental component of data
processing and transformation. In many cases, it is required to do
before you can meaningfully do any work. Like in our case, we have
essentially three datasets that aren't particularly useful on their own
and only really benefit by being joined together. We join them to be
able to make comparisons, analyse the variables together, and to work on
one dataset rather than three.

But joining datasets can be tricky. There are many ways to join datasets
and you often have to do several checks of the data and prepare it in
the right way for your needs, like we've done, to get a useful and
correct output in the end. It can be really easy to not realise that
some data was dropped or not included or that extra data was added. It
can be extremely frustrating to check and confirm things, but ultimately
necessary to continue with doing your analyses and work correctly.

There are many ways to join datasets in `{dplyr}`, all of which are
described in the `?dplyr::join` and `?dplyr::semi_join` help
documentation. While there are several, only a few are most commonly
used. These are `left_join()`, `right_join()`, and `full_join()`.

`left_join(x, y)`

:   Join all rows and columns in `y` that match rows and columns in `x`.
    *Columns* that exist in `y` but not `x` are joined to `x`. The
    number of rows in the joined data is equal to the number of rows in
    `x`. If there are some rows in `y` that don't match with `x`, those
    rows are not included, and so are assigned `NA` values in the output
    data.

![Left joining in `{dplyr}`. Notice how the last row in the blue data
(the row with `d` in column `A`) is not included in the outputted data
on the right. Modified from the Posit `{dplyr}` [cheat
sheet](https://posit.co/wp-content/uploads/2022/10/data-transformation-1.pdf).
Image license is CC-BY-SA.](/images/left-join.png){#fig-left-join
width="90%"
fig-alt="A diagram showing two data frames, one green and one blue, with three columns each. Each data frame has one different column and one different row. The output data frame shows that all columns are output, but only the rows that match with the left data frame (the green one) are included in the output."}

`right_join(x, y)`

:   The opposite of `left_join()`. Join all rows and columns in `x` that
    match rows and columns in `y`. *Columns* that exist in `x` but not
    `y` are joined to `y`. Like `left_join()`, but the opposite, the
    number of rows in the joined data is equal to the number of rows in
    `y`. If there are some rows in `x` that don't match with `y`, those
    rows are not included and are given an `NA` value. This function can
    be useful when used while piping with `|>` when you are processing
    data in a sequence of steps and want to continue piping but join a
    different way then `left_join()`.

![Right joining in `{dplyr}`. Notice how the last row in the green data
(the row with `c` in column `A`) is not included in the outputted data
on the right. Modified from the Posit `{dplyr}` [cheat
sheet](https://posit.co/wp-content/uploads/2022/10/data-transformation-1.pdf).
Image license is
CC-BY-SA.](/images/right-join.png){#fig-right-join width="90%"
fig-alt="A diagram showing two data frames, one green and one blue, with three columns each. Each data frame has one different column and one different row. The output data frame shows that all columns are output, but only the rows that match with the right data frame (the blue one) are included in the output."}

`full_join(x, y)`

:   Join all rows and columns in `y` that match rows and columns in `x`.
    Columns *and* **rows** that exist in `y` but not `x` are joined to
    `x`. A full join keeps all the data from both `x` and `y`. This can
    be useful if you want to make sure you have all the data from both
    datasets, even if it results in more missing values in the output
    data.

![Full joining in `{dplyr}`. Notice how all rows and columns are
included in the outputted data on the right, and that some missingness
is introduced because those values don't exist when the data are
combined in this way. Modified from the Posit `{dplyr}` [cheat
sheet](https://posit.co/wp-content/uploads/2022/10/data-transformation-1.pdf).
Image license is CC-BY-SA.](/images/full-join.png){#fig-full-join
width="90%"
fig-alt="A diagram showing two data frames, one green and one blue, with three columns each. Each data frame has one different column and one different row. The output data frame shows that all columns are output, and all rows are included in the output, even if they don't match with the other data frame."}

{{< text_snippet sticky_up >}}

## Joining with dplyr functions

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Remind everyone that there will be some things that look odd when
joining, but it's likely due to us only importing the first 100 rows
from all the data files.

Walk through the code, the output, and highlight what remains after the
join.
:::

Let's use some of `{dplyr}`'s join functions! We'll join the
`participant_details` and `cgm_data` datasets together. We'll probably
want to use `full_join()`, but let's test out the other two joins first.
In your `docs/learning.qmd` file, go to the bottom of the file and make
a new header called `## Joining datasets`. Below that make a new code
chunk with {{< var keybind.chunk >}}. We'll start with using
`left_join()` to join the two datasets together.

First, let's look at the two datasets before joining them.

```{r}
#| filename: "docs/learning.qmd"
participant_details
cgm_data
```

Notice the number of rows in each dataset. The `participant_details`
dataset has `r nrow(participant_details)` rows and the `cgm_data`
dataset has `r nrow(cgm_data)` rows. When we `left_join()` them, there
should no more than `r nrow(participant_details) + nrow(cgm_data)` rows
(`cgm_data` plus `participant_details`) in the output. There will likely
be less because, remember, we have only imported the first 100 rows of
each dataset. Let's join them with `left_join()`.

```{r left-join}
#| filename: "docs/learning.qmd"
participant_details |>
  left_join(cgm_data)
```

Here, because `cgm_data` has the `hour` column, that means it expands
all the data from `participant_details` for the dates that it joins by.
The number of rows now is
`r nrow(left_join(participant_details, cgm_data))`, which is slightly
less than we expected but it also isn't surprising. Some rows in
`cgm_data` got dropped because we haven't yet imported all the data.

Because theoretically, the same `id` and `date` values should be present
in both `cgm_data` and `participant_details`, using either `left_join()`
or `full_join()` should be similar results. It should *not* give more
than `r nrow(participant_details) + nrow(cgm_data)` rows though.

But let's try `right_join()` first to see what happens. This is simpler,
since it will only join what is in the right side, e.g. `cgm_data`. That
means there should be exactly `r nrow(cgm_data)` rows in the output.

```{r right-join}
#| filename: "docs/learning.qmd"
participant_details |>
  right_join(cgm_data)
```

We see that, yes, it does have the same number of rows. We also see that
there are no missing values in the glucose columns. That's because the
`participant_details` dataset doesn't have glucose data and we know
there is no missing values in `cgm_data` for it. So there will be no
missing values in the output.

Lastly, we'll fully join. Like `left_join()`, the number of rows can not
be more than the sum of the number of rows in both datasets. But it can
be less, since, by joining there will be overlap between the two
datasets. At a minimum, there can not be less rows than the largest of
the two datasets, which is in this case `participant_details` at
`r nrow(participant_details)` rows. Let's try `full_join()` to see what
happens.

```{r full-join}
#| filename: "docs/learning.qmd"
participant_details |>
  full_join(cgm_data)
```

We can see that the number of rows is
`r nrow(full_join(participant_details, cgm_data))`, which is still less
than the sum of the two datasets. But again, it isn't surprising to us
here, since we know there is some overlap between the two datasets.

The `full_join()` function is most often used because we often want to
see all the data we have, even if there are some missing values.
Especially considering that some statistical models can use missing
values as extra information.

Let's code assign this output to a new object called `dime_data`.

```{r assign-full-join}
#| filename: "docs/learning.qmd"
dime_data <- participant_details |>
  full_join(cgm_data)
dime_data
```

And then we can continue with adding the sleep data to it.

```{r sleep-full-join}
#| filename: "docs/learning.qmd"
dime_data <- participant_details |>
  full_join(cgm_data) |>
  full_join(sleep_data)
dime_data
```

Woooo! :tada: We now are at the point of having only one data frame!
Let's check the data out a bit more. Using the Console do:

```{r}
#| filename: "Console"
#| eval: false
View(dime_data)
```

Let's do some basic checks. Notice the column names, they seem to be
repeats but with different names, like `awake` and `wake`. Also, the
seconds sleeping per hour is more seconds than exist in an hour. We
don't know why there are these issues as it isn't explained in the
documentation.

Keep in mind, since we only imported the first 100 rows, there will be
some things that don't match up. But even with this, there are odd
things that we will need to address.

## Putting it all together: Save a final dataset

We are finally at the point where we can put it all together and make a
single dataset! Let's cut the join code we wrote in the previous section
and paste it into the `setup` code chunk of `docs/learning.qmd`.

```{r join-all-datasets-setup}
#| filename: "docs/learning.qmd"
dime_data <- participant_details |>
  full_join(cgm_data) |>
  full_join(sleep_data)
```

Then, open up the `R/functions.R` file and look at the `import_dime()`
function. Find the line that says `n_max = 100` and delete it.

The last step... saving the dataset to the `data/` folder! Why save it
there? That way you communicate to yourself (and others) that this is
the dataset to use, not the data in the `data-raw/` folder. So, open up
`docs/learning.qmd` so we can save it as a CSV file with `write_csv()`.
In the last line of the `setup` code chunk, do:

```{r save-data}
#| filename: "docs/learning.qmd"
write_csv(dime_data, here("data/dime.csv"))
```

Since we don't want to track this file in Git, let's end this with
ignoring it by running in the Console:

```{r ignore-data}
#| filename: "Console"
#| eval: false
usethis::use_git_ignore("data/dime.csv")
```

Now, in the `docs/learning.qmd` file, render the document with
{{< var keybind.render >}}. This will reproducibly create the dataset
and save it to the `data/` folder. Once that is done, we will finish
with committing the changes with {{< var keybind.commit >}} and then
pushing to GitHub.

## Key takeaways

::: {.callout-note appearance="minimal" collapse="true"}
## Teacher note

Quickly cover this and get them to do the survey before moving on to the
discussion activity.
:::

-   Knowing how to join datasets together is a fundamental part of data
    processing and transformation. But it can be also tricky and a
    source of unexpected issues later on if not done well or not
    checked.
-   Use `left_join()`, `right_join()`, and `full_join()` to join two
    datasets together.
-   Use the functional `reduce()` to iteratively apply a function to a
    set of items in order to end up with one item (e.g. join more than
    two datasets into one final dataset).

```{r store-session-code}
#| include: false
save.image(here::here("_temp/joins.RData"))
```

{{< include /_extensions/rostools/r3-theme/includes/code-appendix-r.qmd >}}
